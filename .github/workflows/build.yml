#name: 'Go Build and Deploy'
#
#on:
#  pull_request:
#    branches:
#      - main
#    paths:
#      - 'src/**'
#
#jobs:
#
#  project-build:
#    name: 'Go build and deploy'
#    runs-on: ubuntu-20.04
#
#    steps:
#
#      - name: 'Checkout Project'
#        uses: actions/checkout@v2
#        id: p_checkout
#
#      - name: 'Environment setup'
#        run: |
#          user=
#          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
#            user=${GITHUB_HEAD_REF##*/}
#          elif [[ $GITHUB_EVENT_NAME == 'push' ]]; then
#            commit_msg=$(echo "${{ github.event.head_commit.message }}" | head -n 1)
#            user=$(echo $commit_msg | grep -o 'team/.*' | cut -f2- -d/)
#          else
#            echo "Cannot figure out username"
#            exit 1
#          fi
#
#          if [[ -z "$user" ]]; then
#            echo "Got empty username"
#            exit 2
#          fi
#
#          echo "Running for user: $user"
#          echo "TEAM_MEMBER_NAME=$user" >> "$GITHUB_ENV"
#          echo "IMAGE_TAG=${{ secrets.REGISTRY_LOGIN_SERVER }}/$user:latest" >> "$GITHUB_ENV"
#        id: env_setup
#
#      - name: 'Docker Build'
#        run: |
#          cd src/${{ env.TEAM_MEMBER_NAME }}
#          docker build . -t ${{ env.IMAGE_TAG }}
#          cd ../../
#          mkdir -p images
#          docker save -o images/${{ env.TEAM_MEMBER_NAME }}.tar ${{ env.IMAGE_TAG }}
#        id: d_build
#
#      - name: 'Docker Push'
#        run: |
#          docker load -q -i ${{ env.TEAM_MEMBER_NAME }}.tar
#          docker push ${{ env.IMAGE_TAG }}
#        id: d_push
#
#      - name: 'Kube Deploy'
#        uses: actions-hub/kubectl@master
#        env:
#          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }} #need to set this in place
#        with:
#          args: rollout restart deployment
#        id: kube_deploy
#
##      - name: 'Cache Image'
##        uses: actions/upload-artifact@v2
##        with:
##          name: ${{ env.TEAM_MEMBER_NAME }}
##          path: images/${{ env.TEAM_MEMBER_NAME }}.tar
##          if-no-files-found: error
##        id: d_image_cache
#
